---
import { Icon } from 'free-astro-components'
import Hamburguer from './Hamburguer.astro'
---

<header
  id="main-header"
  class="fixed inset-x-0 top-0 text-white py-4 z-20 transition-all duration-300 ease-in-out"
>
  <div class="container flex justify-between items-center gap-8">
    <a
      id="header-logo"
      class="text-white hover:text-zinc-200 text-4xl font-bold leading-none transition-colors duration-300 ease-in-out"
      href="/"
      aria-label="返回首页"
    >
      <Icon icon="ellipse" class="w-8 h-8" />
    </a>

    <nav>
      <ul class="flex items-center gap-8">
        <li>
          <a
            id="header-nav-link"
            class="text-sm text-white hover:text-zinc-200 transition-colors duration-300 ease-in-out"
            href="https://rabbithouse31.natsuki.cloud/"
            target="_blank"
            rel="noopener noreferrer"
            >关于我们</a
          >
        </li>
        <li class="lg:hidden">
          <Hamburguer />
        </li>
      </ul>
    </nav>
  </div>
</header>

<script>
  // 将所有需要在页面加载/切换后运行的逻辑封装起来
  function setupHeader() {
    // --- 汉堡包菜单逻辑 ---
    const body = document.querySelector('body');
    const hamburguer = document.querySelector('[data-hamburguer]');
    const nav = document.querySelector('[data-nav]');

    // 添加安全检查，确保元素存在
    if (body && hamburguer && nav) {
      hamburguer.addEventListener('click', () => {
        hamburguer.toggleAttribute('open');
        nav.toggleAttribute('open');
        body.classList.toggle('overflow-hidden');
      });
    }

    // --- 顶栏滚动效果逻辑 ---
    // 1. 在外部缓存DOM元素，避免在滚动时重复查询
    const header = document.getElementById('main-header');
    const logo = document.getElementById('header-logo');
    const navLink = document.getElementById('header-nav-link');

    // 添加安全检查
    if (!header || !logo || !navLink) return;

    const scrollThreshold = 50;

    // 2. 定义滚动处理函数
    function handleHeaderScroll() {
      if (window.scrollY > scrollThreshold) {
        // 滚动后的样式
        header.classList.add('bg-neutral-100/60', 'backdrop-blur-md', 'shadow-sm', 'border-b', 'border-neutral-300/50');
        header.classList.remove('text-white');
        header.classList.add('text-neutral-700');
        
        logo.classList.remove('text-white', 'hover:text-zinc-200');
        logo.classList.add('text-primary', 'hover:text-secondary');
        
        navLink.classList.remove('text-white', 'hover:text-zinc-200');
        navLink.classList.add('text-neutral-700', 'hover:text-primary');

      } else {
        // 恢复到顶部的默认样式
        header.classList.remove('bg-neutral-100/60', 'backdrop-blur-md', 'shadow-sm', 'border-b', 'border-neutral-300/50');
        header.classList.remove('text-neutral-700');
        header.classList.add('text-white');

        logo.classList.remove('text-primary', 'hover:text-secondary');
        logo.classList.add('text-white', 'hover:text-zinc-200');

        navLink.classList.remove('text-neutral-700', 'hover:text-primary');
        navLink.classList.add('text-white', 'hover:text-zinc-200');
      }
    }

    // 3. 绑定滚动事件
    // 注意：这里每次页面切换都会重新绑定，但对于 document 级别的事件通常没问题。
    // 如果是复杂情况，可能需要考虑在页面切换前解绑事件。
    document.addEventListener('scroll', handleHeaderScroll, { passive: true });
    
    // 4. 立即执行一次，以设置初始状态
    handleHeaderScroll();
  }

  // 使用 astro:page-load 事件来确保每次页面切换后脚本都能重新运行
  document.addEventListener('astro:page-load', setupHeader);
</script>