---
// 改动：删除了不再使用的 Button 组件导入
// import { Button } from 'free-astro-components'
import Footer from '../components/Footer.astro'
import Header from '../components/Header.astro'
import Hero from '../sections/Hero.astro'
import Intro from '../sections/Intro.astro'
import Layout from '../layouts/Layout.astro'
import Sidebar from '../layouts/Sidebar.astro'
---

<Layout title="welcome come on~">
  <Sidebar class="lg:hidden" />
  <Header />
  <main>
    <Hero
      align="center"
      title="点兔频道｜木结构街道服务器"
      description="请问您今天要来点Minecraft吗？"
      bgImage="/background.png" 
    >
      <div class="flex flex-wrap justify-center items-center gap-4">
        {/* 
          改动：将 <Button> 组件替换为原生的 <a> 标签，
          并直接应用 btn-glass class，以确保样式完全统一。
        */}
        <a href="/guide/server_guide" class="btn-glass">
          📖 查看服务器指南
        </a>

        <div class="relative" data-dropdown-container>
          <button
            type="button"
            class="btn-glass dropdown-trigger flex items-center justify-center gap-2"
            aria-haspopup="true"
            aria-expanded="false"
          >
            🐧 加入社区 <span class="text-xs">▼</span>
          </button>
          <div
            class="dropdown-menu absolute top-full mt-2 w-48 origin-top-left rounded-md bg-white p-2 text-left shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none transition-all duration-150 ease-out"
            role="menu"
            aria-orientation="vertical"
          >
            <a
              href="https://qm.qq.com/q/fZDqrHvjHO"
              target="_blank"
              class="block w-full rounded-md px-4 py-2 text-sm text-zinc-700 hover:bg-zinc-100"
              role="menuitem"
            >
              加入QQ群
            </a>
            <a
              href="https://pd.qq.com/s/57mw8fwlg?b=5"
              target="_blank"
              class="block w-full rounded-md px-4 py-2 text-sm text-zinc-700 hover:bg-zinc-100"
              role="menuitem"
            >
              加入QQ频道
            </a>
          </div>
        </div>
      </div>
    </Hero>
    <Intro />
  </main>
  <Footer />
</Layout>

<style>
  /* 玻璃拟态（半透明）样式 */
  .btn-glass {
    background-color: rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(4px);
    color: white;
    border: 1px solid rgba(255, 255, 255, 0.4);
    font-weight: 500;
    
    /* 核心：为所有按钮强制统一尺寸和对齐方式 */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem 1rem; /* 0.5rem 上下, 1rem 左右 */
    border-radius: 0.375rem; /* 6px */
    transition: background-color 0.2s, border-color 0.2s;
    text-decoration: none; /* 确保 a 标签没有下划线 */
  }
  .btn-glass:hover {
    background-color: rgba(255, 255, 255, 0.3);
    border-color: rgba(255, 255, 255, 0.6);
  }
  .btn-glass:focus-visible {
    box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.5);
    outline: none;
  }

  /* 下拉菜单样式保持不变 */
  .dropdown-menu {
    opacity: 0;
    transform: scale(0.95) translateY(-10px);
    visibility: hidden;
  }

  [data-dropdown-container].open .dropdown-menu {
    opacity: 1;
    transform: scale(1) translateY(0);
    visibility: visible;
  }
</style>

<script>
  function initializeDropdown() {
    const dropdownContainer = document.querySelector('[data-dropdown-container]');
    if (!dropdownContainer) return;

    const triggerButton = dropdownContainer.querySelector('.dropdown-trigger');
    if (!triggerButton) return;
    
    let openTimeout: ReturnType<typeof setTimeout> | undefined;
    let closeTimeout: ReturnType<typeof setTimeout> | undefined;

    const openMenu = () => {
      dropdownContainer.classList.add('open');
      triggerButton.setAttribute('aria-expanded', 'true');
    };

    const closeMenu = () => {
      dropdownContainer.classList.remove('open');
      triggerButton.setAttribute('aria-expanded', 'false');
    };
    
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

    if (isTouchDevice) {
      triggerButton.addEventListener('click', (event) => {
        event.stopPropagation();
        const isOpen = dropdownContainer.classList.toggle('open');
        triggerButton.setAttribute('aria-expanded', String(isOpen));
      });

      document.addEventListener('click', (event) => {
        if (!dropdownContainer.contains(event.target as Node)) {
          closeMenu();
        }
      });
    } else {
      dropdownContainer.addEventListener('mouseenter', () => {
        clearTimeout(closeTimeout);
        openTimeout = setTimeout(openMenu, 200);
      });

      dropdownContainer.addEventListener('mouseleave', () => {
        clearTimeout(openTimeout);
        closeTimeout = setTimeout(closeMenu, 300);
      });
    }
    
    const menuLinks = dropdownContainer.querySelectorAll('.dropdown-menu a');
    menuLinks.forEach(link => {
        link.addEventListener('click', () => {
            clearTimeout(closeTimeout);
            closeMenu();
        });
    });

    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && dropdownContainer.classList.contains('open')) {
        clearTimeout(closeTimeout);
        closeMenu();
      }
    });
  }

  initializeDropdown();
  
  document.addEventListener('astro:after-swap', initializeDropdown);
</script>