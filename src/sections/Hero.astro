---
import HeroGradient from '../components/HeroGradient.astro';

interface Props {
  title?: string;
  description?: string;
  align?: 'center' | 'left';
  bgImage?: string; 
}

const { title, description, align = 'left', bgImage } = Astro.props;
---

<section
  class="relative h-svh text-neutral-700 px-4 pt-24 pb-8 md:px-8 overflow-clip"
>
  <div
    class="relative flex items-center w-full h-full bg-gradient-to-b from-primary/5 via-primary/0 via-70% to-secondary/5 rounded-3xl overflow-clip"
  >
    {!bgImage && <HeroGradient />}

    {bgImage && (
      <div class="absolute inset-0 w-full h-full">
        <img
          src={bgImage}
          alt="服务器背景图"
          class="w-full h-full object-cover"
        />
        <div class="absolute inset-0 bg-black/40"></div>
      </div>
    )}

    <div
      class:list={[
        'relative container flex flex-col gap-16',
        align === 'center' ? 'text-center' : '',
      ]}
    >
      <div class="flex flex-col gap-8">
        {
          title && (
            <h1
              class:list={[
                bgImage ? 'text-white text-with-shadow' : '',
                'text-[8vw] sm:text-[7.5vw] md:text-[7vw] lg:text-[6vw] xl:text-[5vw] leading-none [&>strong]:font-medium',
                align === 'center' ? 'mx-auto' : '',
              ]}
              set:html={title}
            />
          )
        }
        {
          description && (
            <p
              id="typewriter-description"
              data-text={description}
              class:list={[
                bgImage ? 'text-white text-with-shadow' : 'text-neutral-500',
                'lg:text-lg min-h-[1.75rem]',
                align === 'center' ? 'mx-auto' : '',
              ]}
            >
               
            </p>
          )
        }
      </div>

      <div class="flex flex-col gap-4">
        <slot />
      </div>
    </div>
  </div>
</section>

<style>
  .text-with-shadow {
    text-shadow: 2px 2px 6px rgba(0, 0, 0, 0.6);
  }

  #typewriter-description.typing::after {
    content: '|';
    animation: blink 1s step-end infinite;
    margin-left: 0.25rem;
  }

  @keyframes blink {
    from, to { opacity: 1; }
    50% { opacity: 0; }
  }
</style>

<script>
  function runTypewriter() {
    const element = document.getElementById('typewriter-description');

    // Main guard clause: If element doesn't exist, or its data-text is missing,
    // or if it has already been typed, exit immediately.
    // This resolves all TypeScript errors.
    if (!element || !element.dataset.text || element.hasAttribute('data-typed')) {
      return;
    }

    // Now TypeScript knows that `element` and `element.dataset.text` are valid.
    const textToType = element.dataset.text;
    
    element.setAttribute('data-typed', 'true');
    element.classList.add('typing');

    let i = 0;
    const typingSpeed = 150;

    function type() {
      if (i < textToType.length) {
        element.innerHTML = textToType.substring(0, i + 1);
        i++;
        setTimeout(type, typingSpeed);
      } else {
        element.classList.remove('typing');
      }
    }

    setTimeout(type, 500);
  }

  document.addEventListener('astro:page-load', runTypewriter);
</script>