---
import Nav from '../components/Nav.astro'
import NavItem from '../components/NavItem.astro'
import NavLink from '../components/NavLink.astro'

const { class: className } = Astro.props
---

<aside
  data-nav
  class:list={[
    'fixed left-0 inset-y-0 -translate-x-full [&[open]]:translate-x-0 lg:translate-x-0 w-full lg:w-72 bg-neutral-100/60 backdrop-blur-md pt-16 z-10 transition-transform duration-300 ease-in-out',
    className,
  ]}
>
  <div
    class="w-full h-full lg:border-r border-neutral-300/50 px-5 py-4 overflow-y-auto"
  >
    <Nav>
      <NavItem title="网站导航" open>
        <NavLink href="/" label="返回首页" />
      </NavItem>
      <NavItem title="服务器指南" open>
        <NavLink href="/guide/server_guide" label="指南首页" />
        <NavLink href="/guide/server_guide#server-info" label="服务器信息" />
        <NavLink href="/guide/server_guide#notes" label="服务器注意事项" />
        <NavLink href="/guide/server_guide#login-method" label="登录方式" class="pl-4" />
        <NavLink href="/guide/server_guide#faq" label="常见问题" class="pl-4" />
        <NavLink href="/guide/server_guide#rules" label="服务器规范" class="pl-4" />
      </NavItem>
    </Nav>
  </div>
</aside>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sidebar = document.querySelector('aside[data-nav]');
    if (!sidebar) return;

    const sidebarLinks = sidebar.querySelectorAll('a[href^="/guide/server_guide"]');
    const sections = Array.from(sidebarLinks)
      .map(link => {
        const hash = (link as HTMLAnchorElement).hash;
        return hash ? document.querySelector(hash) : null;
      })
      .filter((el): el is Element => el !== null);

    if (sections.length === 0) return;

    const updateActiveLink = (targetId: string) => { // <--- 修复：添加 string 类型
      sidebarLinks.forEach(link => {
        const anchor = link as HTMLAnchorElement;
        const linkHref = anchor.getAttribute('href');
        // <--- 修复：添加 linkHref 的 null 检查
        if (targetId && linkHref && linkHref.endsWith('#' + targetId)) {
          anchor.classList.add('is-active');
        } else if (!targetId && linkHref === '/guide/server_guide') {
          anchor.classList.add('is-active');
        } else {
          anchor.classList.remove('is-active');
        }
      });
    };

    sidebarLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        const anchor = e.currentTarget as HTMLAnchorElement;
        const hash = anchor.hash;
        updateActiveLink(hash.substring(1));
        if (hash) {
          e.preventDefault();
          const targetSection = document.querySelector(hash);
          const header = document.querySelector('header');
          // <--- 修复：使用 instanceof 类型守卫
          if (targetSection instanceof HTMLElement && header instanceof HTMLElement) {
            const headerHeight = header.offsetHeight;
            const elementPosition = targetSection.getBoundingClientRect().top;
            const offsetPosition = elementPosition + window.scrollY - headerHeight;
            const elementHeight = targetSection.offsetHeight; // <--- 修复：现在可以安全访问
            const viewportHeight = window.innerHeight;
            const finalScrollPosition = offsetPosition - (viewportHeight / 2) + (elementHeight / 2) + headerHeight;
            window.scrollTo({
              top: finalScrollPosition,
              behavior: 'smooth'
            });
            history.pushState(null, '', hash);
          }
        }
      });
    });

    const observer = new IntersectionObserver((entries) => {
      let topmostVisibleEntry = null;
      for (const entry of entries) {
        if (entry.isIntersecting) {
          topmostVisibleEntry = entry;
          break;
        }
      }
      if (topmostVisibleEntry) {
        updateActiveLink(topmostVisibleEntry.target.id);
      } else if (sections.length > 0 && window.scrollY < sections[0].getBoundingClientRect().top + window.scrollY - 100) {
        updateActiveLink('');
      }
    }, {
      rootMargin: '0px 0px -85% 0px',
    });

    sections.forEach(section => observer.observe(section));

    const initialHash = window.location.hash.substring(1);
    updateActiveLink(initialHash);
  });
</script>