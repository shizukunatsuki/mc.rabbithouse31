---
import { ViewTransitions } from 'astro:transitions'

interface Props {
  title: string
  description?: string
}

const {
  title = '点兔频道｜木结构街道服务器',
  description = '一个由非官方点兔频道运营的《请问您今天要来点兔子吗》主题自建服务器',
} = Astro.props
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    {/* 
      关键改动 1: 
      将初始 favicon 设置为“空心圆 (○)”，这是标签页处于焦点时的状态。
    */}
    <link
      id="favicon"
      rel="icon"
      href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>○</text></svg>"
    />
    <ViewTransitions fallback="none" />
  </head>
  <body class="bg-white text-zinc-900 antialiased">
    <slot />

    {/* 
      关键改动 2:
      添加客户端脚本来处理 favicon 的动态切换。
    */}
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        // 获取 favicon 元素
        const faviconLink = document.getElementById('favicon');
        if (!faviconLink) return;

        // 定义两种状态下的 favicon 内容 (SVG Data URI)
        const faviconFocused = `data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>○</text></svg>`;
        const faviconBlurred = `data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>♡</text></svg>`;

        // 监听标签页可见性变化事件
        document.addEventListener('visibilitychange', () => {
          // 判断标签页当前是否可见
          if (document.visibilityState === 'visible') {
            // 如果可见（用户回来了），则设置为空心圆
            faviconLink.setAttribute('href', faviconFocused);
          } else {
            // 如果不可见（用户离开了），则设置为实心心形
            faviconLink.setAttribute('href', faviconBlurred);
          }
        });
      });
    </script>
  </body>
</html>
